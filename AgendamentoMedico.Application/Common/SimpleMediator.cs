using System.Reflection;

namespace AgendamentoMedico.Application.Common;

/// <summary>
/// Implementa√ß√£o simples e eficaz do Mediator Pattern
///
/// üéØ AQUI √â ONDE A M√ÅGICA ACONTECE!
/// Esta classe √© o "c√©rebro" do sistema. Ela usa Reflection e Dependency Injection
/// para descobrir e executar o handler correto para cada requisi√ß√£o.
///
/// üîç T√âCNICAS UTILIZADAS:
/// - Reflection: Para descobrir tipos em runtime
/// - Dependency Injection: Para resolver handlers
/// - Generics: Para manter type safety
/// - Dynamic: Para chamadas polim√≥rficas
/// </summary>
public class SimpleMediator(IServiceProvider serviceProvider) : IMediator
{
    /// <summary>
    /// M√©todo principal que processa qualquer requisi√ß√£o
    ///
    /// üîÑ ALGORITMO PASSO A PASSO:
    /// 1. Pega o tipo concreto da requisi√ß√£o (ex: CriarMedicoCommand)
    /// 2. Constr√≥i o tipo do handler necess√°rio (ex: IRequestHandler&lt;CriarMedicoCommand, Medico&gt;)
    /// 3. Pede para o container de DI resolver esse handler
    /// 4. Executa o m√©todo Handle() usando dynamic
    /// 5. Retorna a resposta
    /// </summary>
    public async Task<TResponse> Send<TResponse>(IRequest<TResponse> request, CancellationToken cancellationToken = default)
    {
        // üîç PASSO 1: Descobrir o tipo concreto da requisi√ß√£o
        // request pode ser CriarMedicoCommand, AtualizarPacienteCommand, etc.
        var requestType = request.GetType();

        Console.WriteLine($"üì• Processando requisi√ß√£o: {requestType.Name}");

        // üîç PASSO 2: Construir o tipo do handler necess√°rio
        // Se requestType = CriarMedicoCommand e TResponse = Medico
        // Ent√£o handlerType = IRequestHandler<CriarMedicoCommand, Medico>
        var handlerType = typeof(IRequestHandler<,>).MakeGenericType(requestType, typeof(TResponse));

        Console.WriteLine($"üîç Procurando handler: {handlerType.Name}");

        // üîç PASSO 3: Resolver o handler via Dependency Injection
        // O container procura uma classe que implementa IRequestHandler<TRequest, TResponse>
        var handler = serviceProvider.GetService(handlerType);

        if (handler == null)
        {
            throw new InvalidOperationException(
                $"‚ùå Nenhum handler encontrado para {requestType.Name}. " +
                $"Certifique-se de registrar uma classe que implementa {handlerType.Name}");
        }

        Console.WriteLine($"‚úÖ Handler encontrado: {handler.GetType().Name}");

        // üîç PASSO 4: Executar o m√©todo Handle() dinamicamente
        // Usamos dynamic para evitar reflection complexa
        // √â como fazer: ((IRequestHandler<TRequest, TResponse>)handler).Handle(request, cancellationToken)
        // Mas funciona para qualquer tipo de TRequest e TResponse
        try
        {
            var result = await ((dynamic)handler).Handle((dynamic)request, cancellationToken);

            Console.WriteLine($"üéâ Requisi√ß√£o processada com sucesso!");

            return result;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"üí• Erro ao processar requisi√ß√£o: {ex.Message}");
            throw;
        }
    }
}

/// <summary>
/// ü§î POR QUE USAMOS DYNAMIC?
///
/// Sem dynamic, ter√≠amos que fazer algo assim:
///
/// var method = handlerType.GetMethod("Handle");
/// var result = method.Invoke(handler, new object[] { request, cancellationToken });
/// return (TResponse)await (Task<TResponse>)result;
///
/// O dynamic √© mais simples e leg√≠vel, embora tenha um pequeno overhead.
/// Para a maioria das aplica√ß√µes, a diferen√ßa √© insignificante.
///
/// üöÄ ALTERNATIVAS SEM DYNAMIC:
/// Se quiser performance m√°xima, pode usar Expression Trees ou criar
/// um cache de delegates compilados. Mas isso adiciona complexidade.
/// </summary>