namespace AgendamentoMedico.Application.Common;

/// <summary>
/// Interface que define o contrato para handlers que processam requisi√ß√µes
///
/// üéØ CONCEITO: Um Handler √© uma classe que cont√©m a L√ìGICA DE NEG√ìCIO para processar
/// uma requisi√ß√£o espec√≠fica. Cada requisi√ß√£o tem exatamente UM handler.
///
/// üìã PRINC√çPIOS:
/// - Single Responsibility: Cada handler faz apenas uma coisa
/// - Separation of Concerns: A l√≥gica fica isolada do controller/endpoint
/// - Testabilidade: Cada handler pode ser testado independentemente
///
/// Exemplo de uso:
/// public class CriarMedicoHandler : IRequestHandler&lt;CriarMedicoCommand, Medico&gt;
/// {
///     public async Task&lt;Medico&gt; Handle(CriarMedicoCommand request, CancellationToken cancellationToken)
///     {
///         // L√≥gica para criar m√©dico aqui
///         return new Medico { Nome = request.Nome, CRM = request.CRM };
///     }
/// }
/// </summary>
/// <typeparam name="TRequest">Tipo da requisi√ß√£o que este handler pode processar</typeparam>
/// <typeparam name="TResponse">Tipo da resposta que este handler retorna</typeparam>
public interface IRequestHandler<in TRequest, TResponse>
    where TRequest : IRequest<TResponse>
{
    /// <summary>
    /// Processa a requisi√ß√£o e retorna a resposta
    /// </summary>
    /// <param name="request">A requisi√ß√£o a ser processada</param>
    /// <param name="cancellationToken">Token para cancelar a opera√ß√£o se necess√°rio</param>
    /// <returns>A resposta do tipo TResponse</returns>
    Task<TResponse> Handle(TRequest request, CancellationToken cancellationToken);
}